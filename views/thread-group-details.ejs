<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="page-title"><%= groupName %> 详情</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
        }
        h1 {
            color: #2c3e50;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
            margin-top: 0;
        }
        .stats-section {
            margin-bottom: 30px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 6px;
        }
        .state-summary {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }
        .state-item {
            padding: 10px 15px;
            border-radius: 4px;
            flex: 1;
            min-width: 120px;
            text-align: center;
        }
        .state-RUNNABLE { background-color: #d5f5e3; }
        .state-BLOCKED { background-color: #fadbd8; }
        .state-WAITING { background-color: #ebdef0; }
        .state-TIMED_WAITING { background-color: #fdebd0; }
        .thread-card {
            margin: 15px 0;
            border: 1px solid #eee;
            border-radius: 6px;
            overflow: hidden;
        }
        .thread-header {
            padding: 12px 15px;
            background: #f9f9f9;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background 0.2s;
        }
        .thread-header:hover {
            background: #f0f0f0;
        }
        .stack-trace {
            padding: 15px;
            background: white;
            display: block; /* 修改为默认显示 */
            border-top: 1px solid #eee;
        }
        .toggle-icon::before {
            content: "▼"; /* 修改为默认展开状态的图标 */
            margin-right: 8px;
            color: #2980b9;
        }
        .expanded .toggle-icon::before {
            content: "▶"; /* 修改为折叠状态的图标 */
            color: #3498db;
        }
        .state-tag {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 0.85em;
            margin-left: 10px;
        }
        pre {
            margin: 0;
            white-space: pre-wrap;
            overflow-wrap: break-word;
            font-family: Consolas, monospace;
            font-size: 0.9em;
            max-width: 100%;
        }
        .back-link {
            display: inline-block;
            margin-top: 20px;
            padding: 10px 20px;
            background: #3498db;
            color: white;
            border-radius: 4px;
            text-decoration: none;
            transition: background 0.3s;
        }
        .back-link:hover {
            background: #2980b9;
        }
        .language-switch {
            position: absolute;
            top: 10px;
            right: 10px;
        }
        .language-btn {
            background-color: transparent;
            color: #3498db;
            border: 1px solid #3498db;
            padding: 5px 10px;
            margin-left: 5px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .language-btn.active {
            background-color: #3498db;
            color: white;
        }
        /* 移除搜索框样式 */
        /*
        .search-box {
            margin: 15px 0;
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        */
    </style>
</head>
<body>
    <div class="container">
        <!-- 语言切换按钮 -->
        <div class="language-switch">
            <button class="language-btn" onclick="switchLanguage('en')" id="en-btn">English</button>
            <button class="language-btn" onclick="switchLanguage('zh')" id="zh-btn">中文</button>
        </div>
        
        <h1><span id="thread-group-label">线程组：</span><%= groupName %></h1>
        
        <!-- 状态统计部分 -->
        <div class="stats-section">
            <h2 id="stats-title">状态统计</h2>
            <p><span id="total-threads-label">总线程数：</span><%= threads.length %></p>
            
            <div class="state-summary">
                <% 
                const stateCount = {};
                threads.forEach(thread => {
                    stateCount[thread.state] = (stateCount[thread.state] || 0) + 1;
                });
                
                Object.entries(stateCount).forEach(([state, count]) => { 
                %>
                    <div class="state-item state-<%= state %>">
                        <strong><%= state %></strong><br>
                        <span><%= count %></span> <span id="threads-count-text-<%= state %>">个线程</span><br>
                        <small>(<%= (count / threads.length * 100).toFixed(1) %>%)</small>
                    </div>
                <% }) %>
            </div>
        </div>
        
        <!-- 移除搜索框 -->
        
        <!-- 线程列表 -->
        <h2 id="threads-list-title">线程列表</h2>
        <% threads.forEach(thread => { %>
            <div class="thread-card">
                <div class="thread-header" onclick="toggleStackTrace(this)">
                    <div>
                        <span class="toggle-icon"></span>
                        <strong><%= thread.name %></strong>
                        <span class="state-tag state-<%= thread.state %>"><%= thread.state %></span>
                    </div>
                </div>
                <div class="stack-trace">
                    <pre class="full-stack"><%- thread.stack.join('\n') %></pre>
                </div>
            </div>
        <% }) %>
        
        <div style="text-align: center;">
            <a href="/analyze-results" class="back-link" id="back-to-results">← 返回结果页</a>
            <a href="/" class="back-link" id="back-link">← 返回首页</a>
        </div>
    </div>
    
    <script>
        function toggleStackTrace(header) {
            const card = header.parentElement;
            const trace = card.querySelector('.stack-trace');
            
            // 修改：检查当前显示状态，如果是 block，则隐藏，否则显示
            const isVisible = trace.style.display === 'block' || trace.style.display === '';
            trace.style.display = isVisible ? 'none' : 'block';
            
            header.classList.toggle('expanded');
        }
        
        // 移除搜索线程功能
        /*
        function searchThreads() {
            const searchText = document.getElementById('threadSearch').value.toLowerCase();
            const threadCards = document.querySelectorAll('.thread-card');
            
            threadCards.forEach(card => {
                const threadName = card.querySelector('strong').textContent.toLowerCase();
                const stackTrace = card.querySelector('.full-stack').textContent.toLowerCase();
                
                if (threadName.includes(searchText) || stackTrace.includes(searchText)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        }
        */
        
        // 初始化语言设置
        function initLanguage() {
            // 从本地存储获取语言设置，默认为英文
            const lang = localStorage.getItem('preferredLanguage') || 'en';
            switchLanguage(lang);
        }

        // 切换语言
        function switchLanguage(lang) {
            // 保存语言偏好
            localStorage.setItem('preferredLanguage', lang);
            
            // 更新UI
            if (lang === 'en') {
                document.getElementById('en-btn').classList.add('active');
                document.getElementById('zh-btn').classList.remove('active');
                document.title = '<%= groupName %> Thread Group Details';
                document.getElementById('thread-group-label').innerText = 'Thread Group: ';
                document.getElementById('stats-title').innerText = 'State Statistics';
                document.getElementById('total-threads-label').innerText = 'Total Threads: ';
                document.getElementById('threads-list-title').innerText = 'Thread List';
                // 移除搜索框相关翻译
                // document.getElementById('threadSearch').placeholder = 'Search threads...';
                document.getElementById('back-to-results').innerText = '← Back to Results';
                document.getElementById('back-link').innerText = '← Back to Home';
                
                // 更新所有线程数量文本
                document.querySelectorAll('[id^="threads-count-text-"]').forEach(el => {
                    el.innerText = ' threads';
                });
            } else {
                document.getElementById('en-btn').classList.remove('active');
                document.getElementById('zh-btn').classList.add('active');
                document.title = '<%= groupName %> 线程组详情';
                document.getElementById('thread-group-label').innerText = '线程组：';
                document.getElementById('stats-title').innerText = '状态统计';
                document.getElementById('total-threads-label').innerText = '总线程数：';
                document.getElementById('threads-list-title').innerText = '线程列表';
                // 移除搜索框相关翻译
                // document.getElementById('threadSearch').placeholder = '搜索线程...';
                document.getElementById('back-to-results').innerText = '← 返回结果页';
                document.getElementById('back-link').innerText = '← 返回首页';
                
                // 更新所有线程数量文本
                document.querySelectorAll('[id^="threads-count-text-"]').forEach(el => {
                    el.innerText = ' 个线程';
                });
            }
        }

        // 页面加载时初始化语言
        window.onload = function() {
            initLanguage();
            
            // 初始化所有线程卡片为展开状态
            document.querySelectorAll('.thread-header').forEach(header => {
                header.classList.add('expanded');
            });
        };
    </script>
</body>
</html>